package co.rxstack.ml.aws;

import java.util.Optional;

import co.rxstack.ml.client.aws.IMachineLearningClient;
import co.rxstack.ml.context.TestContext;
import com.amazonaws.services.machinelearning.model.PredictResult;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = TestContext.class)
public class MachineLearningTest {

	@Autowired
	private IMachineLearningClient machineLearningClient;

	@Before
	public void setup() {

	}

	@Test
	public void testPrediction() {
		Optional<PredictResult> resultOptional = machineLearningClient.predict(
			new double[] { 0.019953463226556778, -0.07485145330429077, -0.11373704671859741, 0.08067240566015244,
				-0.006801460403949022, 0.08451378345489502, 0.00848567858338356, 0.1172875389456749,
				0.022633450105786324, 0.11163280159235, 0.031150026246905327, 0.14338593184947968, 0.24339009821414948,
				0.019339198246598244, -0.17211847007274628, 0.08213640749454498, -0.00363385071977973,
				-0.04447338730096817, 0.23888862133026123, -8.26208561193198E-4, -0.0021088593639433384,
				-0.055455468595027924, -0.023958906531333923, -0.14796534180641174, -0.07570250332355499,
				-0.04156767949461937, -0.05985593423247337, 0.018216921016573906, 0.055983323603868484,
				-0.0577075369656086, 0.07468003779649734, 0.04304005950689316, -0.12156800180673599,
				0.046012211591005325, 0.07833660393953323, -0.1595509797334671, -0.079652801156044,
				-0.04348878934979439, -0.03033202514052391, 0.027087805792689323, 0.02746184729039669,
				-0.03274292126297951, -0.19981227815151215, -0.08052089065313339, -0.13568679988384247,
				0.08910635113716125, 0.07374805212020874, 0.09178775548934937, 0.15058480203151703,
				-0.014292496256530285, -0.09753431379795074, -0.004844925366342068, -0.0249444879591465,
				-0.05815781280398369, -0.08392563462257385, -6.603884976357222E-4, -0.04657164588570595,
				0.1384488195180893, -0.1009453609585762, 0.050089530646800995, 0.12327474355697632, 0.10934276878833771,
				0.10767707973718643, 0.07510876655578613, 0.01043335534632206, -0.07434079796075821,
				0.11380945146083832, 0.0749998539686203, 0.23204205930233002, 0.08252472430467606, 0.006793247535824776,
				-0.08026287704706192, 0.05819391459226608, -0.07705112546682358, -0.023988205939531326,
				0.11908417195081711, -0.10635886341333389, -0.020649023354053497, -0.09485103189945221,
				0.002837270265445113, 0.2236091047525406, -0.019740063697099686, -0.050655290484428406,
				0.06532588601112366, -0.2263054996728897, 0.09309379756450653, -0.05933598056435585,
				-0.09346900880336761, -0.0688694566488266, -0.04637143015861511, -0.09614228457212448,
				0.07349862158298492, -0.09312204271554947, 0.09842672944068909, 0.02357093244791031,
				-0.008930115029215813, 0.15012302994728088, 0.028719555586576462, 0.05225231871008873,
				-0.027307812124490738, 0.11666298657655716, -0.015889080241322517, 0.11811012774705887,
				-2.2843606711830944E-4, -0.02842756360769272, -0.07803431153297424, -0.09098643064498901,
				0.04488197714090347, 0.05336381122469902, 0.1510864794254303, 0.05982877314090729, 0.013910799287259579,
				0.07622583955526352, -0.024950770661234856, -0.04474404826760292, -0.06373944878578186,
				0.0012550133978947997, -0.03238191455602646, 0.04366816207766533, 0.015295274555683136,
				0.044936154037714005, -0.0026517389342188835, -0.011448473669588566, -0.09986726194620132,
				-0.007705495227128267, -0.04652523249387741, 0.012185171246528625, -0.08308813720941544
			});

		Assert.assertTrue(resultOptional.isPresent());
		Assert.assertEquals("1752", resultOptional.get().getPrediction().getPredictedLabel());
		System.out.println(resultOptional.get().getPrediction().getPredictedValue().doubleValue());
	}

}
